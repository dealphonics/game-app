// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram
const tg = window.Telegram.WebApp;
tg.ready();
tg.expand();
tg.setHeaderColor('#0f0f23');

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let userScore = 0;
let unlockedTracks = [];
let currentGameType = null;
let gameRunning = false;
let gamePaused = false;
let selectedAlbum = 'karmageddon';

// –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –≤—ã–ø–∞–¥–µ–Ω–∏—è –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏
const rarityChances = {
    'common': 65,
    'rare': 20,
    'epic': 10,
    'legendary': 5
};

// –¶–≤–µ—Ç–∞ —Ä–µ–¥–∫–æ—Å—Ç–∏
const rarityColors = {
    'common': '#4CAF50',
    'rare': '#2196F3',
    'epic': '#9C27B0',
    'legendary': '#FF9800'
};

// –ù–∞–∑–≤–∞–Ω–∏—è —Ä–µ–¥–∫–æ—Å—Ç–∏
const rarityNames = {
    'common': '–û–±—ã—á–Ω—ã–π',
    'rare': '–†–µ–¥–∫–∏–π',
    'epic': '–≠–ø–∏—á–µ—Å–∫–∏–π',
    'legendary': '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π'
};

// 20 –†–ê–ó–ù–´–• –ü–ê–¢–¢–ï–†–ù–û–í –ë–õ–û–ö–û–í (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
const blockPatterns = [
    () => { return { rows: 4, cols: 7, pattern: 'full' }; },
    () => { 
        const blocks = [];
        for (let row = 0; row < 5; row++) {
            const blocksInRow = 7 - row * 2;
            const startCol = row;
            for (let col = 0; col < blocksInRow; col++) {
                blocks.push({ row: row, col: startCol + col });
            }
        }
        return { custom: blocks };
    },
    () => {
        const blocks = [];
        const pattern = [
            [1,0,0,1,0,0,1],
            [1,0,1,1,1,0,1],
            [1,1,0,1,0,1,1],
            [1,0,0,1,0,0,1]
        ];
        for (let row = 0; row < pattern.length; row++) {
            for (let col = 0; col < pattern[row].length; col++) {
                if (pattern[row][col]) {
                    blocks.push({ row: row, col: col });
                }
            }
        }
        return { custom: blocks };
    },
    () => {
        const blocks = [];
        for (let row = 0; row < 4; row++) {
            for (let col = 0; col < 7; col++) {
                if ((row + col) % 2 === 0) {
                    blocks.push({ row: row, col: col });
                }
            }
        }
        return { custom: blocks };
    }
];

// –ê–í–¢–û–°–û–•–†–ê–ù–ï–ù–ò–ï
function saveProgress() {
    const progressData = {
        userScore: userScore,
        unlockedTracks: unlockedTracks,
        selectedAlbum: selectedAlbum,
        timestamp: Date.now()
    };
    localStorage.setItem('soundkeeper_progress', JSON.stringify(progressData));
}

function loadProgress() {
    const saved = localStorage.getItem('soundkeeper_progress');
    if (saved) {
        try {
            const data = JSON.parse(saved);
            userScore = data.userScore || 0;
            unlockedTracks = data.unlockedTracks || [];
            selectedAlbum = data.selectedAlbum || 'karmageddon';
            
            document.getElementById('scoreDisplay').textContent = userScore;
            updateTracksCount();
            updateActiveAlbum();
            
            console.log('–ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∂–µ–Ω:', data);
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', e);
        }
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–ª—å–±–æ–º–∞
function getRandomTrack() {
    const currentAlbum = albums[selectedAlbum];
    const random = Math.random() * 100;
    let rarity;
    
    if (random <= rarityChances.legendary) {
        rarity = 'legendary';
    } else if (random <= rarityChances.legendary + rarityChances.epic) {
        rarity = 'epic';
    } else if (random <= rarityChances.legendary + rarityChances.epic + rarityChances.rare) {
        rarity = 'rare';
    } else {
        rarity = 'common';
    }
    
    const tracksOfRarity = currentAlbum.tracks.filter(track => track.rarity === rarity);
    return tracksOfRarity[Math.floor(Math.random() * tracksOfRarity.length)];
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞
function updateScore(points) {
    userScore += points;
    document.getElementById('scoreDisplay').textContent = userScore;
    updateTracksCount();
    saveProgress();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Ç—Ä–µ–∫–æ–≤
function updateTracksCount() {
    const totalTracks = albums.karmageddon.tracks.length + albums.psychi.tracks.length;
    document.getElementById('tracksCount').textContent = unlockedTracks.length;
    document.getElementById('totalTracks').textContent = totalTracks;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–ª—å–±–æ–º–∞
function updateActiveAlbum() {
    document.getElementById('activeAlbum').textContent = `üìÄ ${albums[selectedAlbum].name}`;
}

// –û–±–Ω–æ–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é openGameModal
function openGameModal(gameType) {
    currentGameType = gameType;
    const modal = document.getElementById('gameModal');
    const title = document.getElementById('gameTitle');
    
    modal.style.display = 'block';
    document.getElementById('gameOverDiv').style.display = 'none';
    
    if (gameType === 'risk') {
        title.textContent = '‚öîÔ∏è Risk of Rain';
        startRiskGame();
    } else if (gameType === 'doodle') {
        title.textContent = 'üéØ Doodle Jump';
        startDoodleGame();
    }
}

// –û–±–Ω–æ–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é restartCurrentGame
function restartCurrentGame() {
    if (currentGameType === 'risk') {
        startRiskGame();
    } else if (currentGameType === 'doodle') {
        startDoodleGame();
    }
}
// –ó–∞–∫—Ä—ã—Ç–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function closeGameModal() {
    gameRunning = false;
    gamePaused = false;
    currentGameType = null;
    document.getElementById('gameModal').style.display = 'none';
    
    const canvas = document.getElementById('gameCanvas');
    const ctx = canvas.getContext('2d');
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    
    document.getElementById('countdownDiv').innerHTML = '';
    document.getElementById('levelTransitionDiv').innerHTML = '';
    
    // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–ª–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∏–≥—Ä—ã
    const fullscreenBtn = document.getElementById('fullscreenBtn');
    if (fullscreenBtn) {
        fullscreenBtn.style.display = 'none';
    }
    
    // –í—ã—Ö–æ–¥–∏–º –∏–∑ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    if (document.fullscreenElement) {
        document.exitFullscreen();
    }
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function openMusicModal() {
    const modal = document.getElementById('musicModal');
    modal.style.display = 'block';
    selectAlbum(selectedAlbum);
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function closeMusicModal() {
    document.getElementById('musicModal').style.display = 'none';
}

// –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ —Ç—Ä–µ–∫–∞
function showTrackPopup(track, isNew) {
    gamePaused = true;
    
    const popup = document.createElement('div');
    popup.className = 'track-popup';
    const rarityClass = `rarity-${track.rarity}`;
    
    popup.innerHTML = `
        <h3>${isNew ? 'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é!' : 'üìÄ –¢—Ä–µ–∫ —É–∂–µ –µ—Å—Ç—å'}</h3>
        <div style="font-size: 40px; margin: 15px 0; color: ${rarityColors[track.rarity]};">üíø</div>
        <div class="track-name" style="color: ${rarityColors[track.rarity]};">${track.title}</div>
        <div class="track-artist">${track.artist}</div>
        <div class="rarity-badge ${rarityClass}" style="margin: 10px 0;">${rarityNames[track.rarity]}</div>
        <p style="color: #aaa; margin: 10px 0; font-size: 12px;">
            ${isNew ? '–¢—ã –≤—ã–±–∏–ª –Ω–æ–≤—ã–π —Ç—Ä–µ–∫!' : '–≠—Ç–æ—Ç —Ç—Ä–µ–∫ —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å.'}
        </p>
        <button class="restart-btn" onclick="closeTrackPopup(this)" style="margin-top: 15px;">
            –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É
        </button>
    `;
    
    document.body.appendChild(popup);
    
    if (isNew) {
        tg.HapticFeedback.impactOccurred('heavy');
        saveProgress();
    } else {
        tg.HapticFeedback.impactOccurred('light');
    }
}

// –ó–∞–∫—Ä—ã—Ç—å –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ —Ç—Ä–µ–∫–∞
function closeTrackPopup(button) {
    button.parentElement.remove();
    gamePaused = false;
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –∏—Ö
window.onclick = function(event) {
    const gameModal = document.getElementById('gameModal');
    const musicModal = document.getElementById('musicModal');
    
    if (event.target === gameModal) {
        closeGameModal();
    }
    if (event.target === musicModal) {
        closeMusicModal();
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.onload = function() {
    loadProgress();
    updateTracksCount();
    updateActiveAlbum();
};
